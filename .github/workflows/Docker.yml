# 工作流名称
name: Build iwechat and Push to CNB Registry

# 工作流触发器
on:
  # 1. 当有代码推送到 main 分支时触发
  push:
    branches: [ "main" ]
  # 2. 允许在 GitHub Actions 页面手动触发
  workflow_dispatch:

jobs:
  build-and-push:
    # 使用最新的 Ubuntu 运行环境
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出当前仓库代码 (这是运行工作流所必需的)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 克隆 iwechat 仓库到名为 'iwechat-repo' 的子目录
      - name: Clone iwechat repository
        uses: actions/checkout@v4
        with:
          repository: iwechatcom/iwechat
          path: iwechat-repo # 将 iwechat 仓库克隆到这个路径下

      # 步骤 3: 设置 QEMU，用于模拟不同 CPU 架构环境
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤 4: 设置 Docker Buildx，这是支持多架构构建的高级工具
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 5: 登录到 cnb.cool Docker 仓库
      - name: Log in to CNB Docker Registry
        uses: docker/login-action@v3
        with:
          registry: docker.cnb.cool
          username: cnb # 根据您的要求，使用固定的用户名 'cnb'
          password: ${{ secrets.CNB_DOCKER_TOKEN }} # 从仓库 Secrets 中获取名为 CNB_DOCKER_TOKEN 的访问令牌

      # 步骤 6: 构建并推送多架构 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # 构建上下文目录，即包含 Dockerfile 的目录
          context: ./iwechat-repo
          # 指定要构建的平台架构
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          # 推送镜像到仓库
          push: true
          # 为镜像打上标签
          # 格式: REGISTRY/NAMESPACE/IMAGE_NAME:TAG
          # !! 重要 !! 请根据您的实际情况修改 'msk.love' 部分
          tags: |
            docker.cnb.cool/msk.love/iwechat:latest
            docker.cnb.cool/msk.love/iwechat:${{ github.sha }}
          # 启用构建缓存以提高后续构建速度
          cache-from: type=gha
          cache-to: type=gha,mode=max
