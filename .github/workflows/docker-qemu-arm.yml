name: Build and Push Multi-Arch Docker Image

on:
  push:
    branches: [ "main" ] # 或者您希望触发构建的分支
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出您自己的仓库（包含 Dockerfile 和 scripts）
      - name: Checkout your repository
        uses: actions/checkout@v4

      # 2. 克隆 iwechat 仓库到名为 iwechat_source 的子目录
      - name: Clone iwechat repository
        run: git clone https://github.com/iwechatcom/iwechat.git iwechat_source

      # 3. 将您的构建文件复制到 iwechat_source 目录中，准备构建上下文
      - name: Prepare build context
        run: |
          cp ./Dockerfile ./iwechat_source/Dockerfile
          mkdir -p ./iwechat_source/scripts
          cp ./docker-entrypoint.sh ./iwechat_source/scripts/docker-entrypoint.sh

      # 4. 设置 QEMU 以支持多平台构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 5. 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 6. 登录到 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 7. 构建并推送镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # 构建上下文设置为克隆下来的 iwechat 目录
          context: ./iwechat_source
          # Dockerfile 位于上下文的根目录
          file: ./iwechat_source/Dockerfile
          push: true
          # *** 关键修正：动态生成镜像标签 ***
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/iwechat:arm64
          # 定义目标平台，一次性构建 ARM 和 AMD 架构
          platforms: linux/arm64
