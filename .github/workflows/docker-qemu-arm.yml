name: Build and Push iWeChat ARM Docker Image

# 触发器配置
on:
  # 1. 当代码推送到 main 分支时触发
  push:
    branches:
      - main
  # 2. 允许在 GitHub Actions 页面手动触发
  workflow_dispatch:
  # 3. 定时触发：每天的 UTC 时间 0 点执行一次，以拉取 iwechat 的最新代码
  schedule:
    - cron: '0 0 * * *'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 检出您自己的仓库 (包含 Dockerfile, sh 脚本和此工作流文件)
      - name: Checkout Builder Repository
        uses: actions/checkout@v4

      # 步骤 2: 检出 iwechatcom/iwechat 仓库的源代码到 'source-app' 目录
      - name: Checkout iwechat Source Code
        uses: actions/checkout@v4
        with:
          repository: 'iwechatcom/iwechat' # 指定源仓库
          path: 'source-app'             # 将代码克隆到这个子目录
          # 可选：如果 iwechat 仓库有多个分支，可以指定特定分支
          # ref: 'master'

      # 步骤 3: 设置 QEMU 以支持在 x86 runner 上构建 ARM 镜像
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤 4: 设置 Docker Buildx，这是 Docker 的高级构建工具
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 5: 登录到 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤 6: 构建并推送 Docker 镜像
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # --- 修改点 ---
          # 指定目标平台为 ARM64 和 ARMv7
          platforms: linux/arm64,linux/armv7
          push: true
          # 设置镜像标签，例如: yourname/iwechat:latest, yourname/iwechat:arm-20240101
          # 这些标签将指向一个包含 arm64 和 armv7 变体的 manifest list
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/iwechat:latest-arm
            ${{ secrets.DOCKERHUB_USERNAME }}/iwechat:arm-${{ github.run_number }}
          # 开启构建缓存，加快后续构建速度
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 步骤 7: 打印出已推送的镜像信息 (可选)
      - name: Print image digest
        run: echo ${{ steps.build-and-push.outputs.digest }}
